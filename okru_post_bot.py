import os
import time
import re
import logging
import sys
import threading
import asyncio
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from flask import Flask, request, jsonify
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ ENV
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_USER_ID = str(os.getenv("TELEGRAM_USER_ID"))  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è chat_id
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ù–∞–ø—Ä–∏–º–µ—Ä: https://your-app.onrender.com/webhook
USE_WEBHOOK = os.getenv("USE_WEBHOOK", "false").lower() == "true"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TELEGRAM_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_BOT_TOKEN")
if not TELEGRAM_USER_ID:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_USER_ID")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
telegram_bot = Bot(token=TELEGRAM_TOKEN)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —á–µ—Ä–µ–∑ Telegram
def send_screenshot(driver, caption: str):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ Selenium –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ Telegram.
    """
    try:
        png = driver.get_screenshot_as_png()
        telegram_bot.send_photo(
            chat_id=TELEGRAM_USER_ID,
            photo=png,
            caption=caption
        )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç: {e}")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s | %(levelname)s | %(message)s", level=logging.INFO)
logger = logging.getLogger("okru_bot")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Å—Å–∏–∏ –∏ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
current_session = None
current_profile = None
waiting_for_sms = False
waiting_for_groups = False
waiting_for_post = False
sms_code_received = None
groups_received = None
post_info_received = None

# Flask app
app = Flask(__name__)

# Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)
application = None

@app.route('/')
def health_check():
    return jsonify({"status": "ok", "message": "Bot is running"})

@app.route('/health')
def health():
    return jsonify({"status": "healthy"})

@app.route('/webhook', methods=['POST'])
async def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
    if request.content_type == 'application/json':
        try:
            update_data = request.get_json()
            update = Update.de_json(update_data, application.bot)
            await application.process_update(update)
            return jsonify({"status": "ok"})
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            return jsonify({"status": "error", "message": str(e)}), 500
    return jsonify({"status": "error", "message": "Invalid content type"}), 400

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
... # –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ get_profiles, OKSession –∏ –¥—Ä—É–≥–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π authenticate –∏ try_sms_verification

class OKSession:
    def __init__(self, email, password, person_name):
        self.email = email
        self.password = password
        self.person_name = person_name
        self.driver = None
        self.wait = None
        self.authenticated = False

    def init_driver(self):
        opts = uc.ChromeOptions()
        opts.add_argument('--headless=new')
        opts.add_argument('--no-sandbox')
        opts.add_argument('--disable-dev-shm-usage')
        opts.add_argument('--disable-gpu')
        opts.add_argument('--window-size=1920,1080')
        self.driver = uc.Chrome(options=opts)
        self.wait = WebDriverWait(self.driver, 20)

    def try_confirm_identity(self):
        try:
            btn = self.wait.until(EC.element_to_be_clickable((By.XPATH,
                "//input[@value='Yes, confirm']"
                " | //button[contains(text(),'Yes, confirm')]"
                " | //button[contains(text(),'–î–∞, —ç—Ç–æ —è')]"
            )))
            btn.click()
            logger.info("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ—à–ª–æ")
            time.sleep(1)
            send_screenshot(self.driver, f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è {self.person_name}")
        except:
            logger.info("–ù–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏")
            send_screenshot(self.driver, f"–ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è {self.person_name}")

    def wait_for_sms_code(self, timeout=120):
        global waiting_for_sms, sms_code_received
        waiting_for_sms = True
        sms_code_received = None
        logger.info("–û–∂–∏–¥–∞—é SMS-–∫–æ–¥")
        deadline = time.time() + timeout

        while time.time() < deadline:
            if sms_code_received is not None:
                code = sms_code_received
                sms_code_received = None
                waiting_for_sms = False
                logger.info("SMS-–∫–æ–¥ –ø–æ–ª—É—á–µ–Ω")
                return code
            time.sleep(1)

        waiting_for_sms = False
        logger.error("–ù–µ –ø–æ–ª—É—á–∏–ª–∏ SMS-–∫–æ–¥")
        send_screenshot(self.driver, f"–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è SMS-–∫–æ–¥–∞ –¥–ª—è {self.person_name}")
        raise TimeoutException("SMS-–∫–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω")

    def try_sms_verification(self):
        try:
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {self.person_name}")
            data_l = self.driver.find_element(By.TAG_NAME,'body').get_attribute('data-l') or ''
            if 'userMain' in data_l and 'anonymMain' not in data_l:
                logger.info(f"‚úÖ {self.person_name} —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
                send_screenshot(self.driver, f"–£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {self.person_name}")
                return True

            logger.info(f"üì± –¢—Ä–µ–±—É–µ—Ç—Å—è SMS-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è {self.person_name}")
            logger.info(f"üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é SMS-–∫–æ–¥ –¥–ª—è {self.person_name}")
            btn = self.wait.until(EC.element_to_be_clickable((By.XPATH,
                "//input[@type='submit' and @value='Get code']"
            )))
            btn.click()
            time.sleep(1)
            send_screenshot(self.driver, f"–ó–∞–ø—Ä–æ—à–µ–Ω SMS-–∫–æ–¥ –¥–ª—è {self.person_name}")

            inp = self.wait.until(EC.presence_of_element_located((By.XPATH,
                "//input[@id='smsCode' or contains(@name,'smsCode')]"
            )))

            logger.info(f"üì® –ñ–¥—É SMS-–∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è {self.person_name}")
            code = self.wait_for_sms_code()

            logger.info(f"üî¢ –í–≤–æ–∂—É SMS-–∫–æ–¥ –¥–ª—è {self.person_name}")
            inp.clear()
            inp.send_keys(code)
            send_screenshot(self.driver, f"–í–≤–µ–ª–∏ SMS-–∫–æ–¥ {code} –¥–ª—è {self.person_name}")

            next_btn = self.driver.find_element(By.XPATH,
                "//input[@type='submit' and @value='Next']"
            )
            next_btn.click()
            time.sleep(1)
            send_screenshot(self.driver, f"–ü–æ—Å–ª–µ submit SMS-–∫–æ–¥–∞ –¥–ª—è {self.person_name}")

            logger.info(f"‚úÖ SMS-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è {self.person_name}!")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ SMS-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è {self.person_name}: {e}")
            send_screenshot(self.driver, f"–û—à–∏–±–∫–∞ SMS-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return False

    def authenticate(self):
        try:
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è {self.person_name}")
            self.init_driver()
            logger.info(f"üåê –û—Ç–∫—Ä—ã–≤–∞—é OK.ru –¥–ª—è {self.person_name}")
            self.driver.get("https://ok.ru/")
            send_screenshot(self.driver, f"–û—Ç–∫—Ä—ã—Ç–∞ OK.ru –¥–ª—è {self.person_name}")

            logger.info(f"üìù –í–≤–æ–∂—É email –¥–ª—è {self.person_name}")
            self.wait.until(EC.presence_of_element_located((By.NAME,'st.email'))).send_keys(self.email)
            logger.info(f"üîë –í–≤–æ–∂—É –ø–∞—Ä–æ–ª—å –¥–ª—è {self.person_name}")
            self.driver.find_element(By.NAME,'st.password').send_keys(self.password)
            send_screenshot(self.driver, f"–í–≤–æ–¥–∏–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {self.person_name}")

            logger.info(f"‚úÖ –ù–∞–∂–∏–º–∞—é –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞ –¥–ª—è {self.person_name}")
            self.driver.find_element(By.CSS_SELECTOR, "input[type='submit']").click()
            time.sleep(2)
            send_screenshot(self.driver, f"–ù–∞–∂–∞–ª–∏ –í–æ–π—Ç–∏ –¥–ª—è {self.person_name}")

            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è {self.person_name}")
            self.try_confirm_identity()

            logger.info(f"üì± –ü—Ä–æ–≤–µ—Ä—è—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å SMS-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è {self.person_name}")
            if self.try_sms_verification():
                self.authenticated = True
                logger.info(f"üéâ –£–°–ü–ï–®–ù–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –¥–ª—è {self.person_name}!")
                send_screenshot(self.driver, f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è {self.person_name}")
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ SMS-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è {self.person_name}")
                send_screenshot(self.driver, f"–ü—Ä–æ–≤–∞–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {self.person_name}")
                return False
        except Exception as e:
            logger.error(f"üí• –û–®–ò–ë–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –¥–ª—è {self.person_name}: {e}")
            send_screenshot(self.driver, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: wait_for_groups, wait_for_post_info, post_to_group, start_posting_workflow, close

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
... # –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∑–∞–ø—É—Å–∫–∞ –∏ handlers –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

if __name__ == "__main__":
    port = int(os.environ.get('PORT', 5000))
    # –õ–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ webhook –∏–ª–∏ polling –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
