import os
import logging
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ ENV
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TELEGRAM_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_BOT_TOKEN")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s | %(levelname)s | %(message)s", level=logging.INFO)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
async def cmd_start(update, context):
    # Inline –∫–Ω–æ–ø–∫–∏ (–ø–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
    inline_keyboard = [
        [InlineKeyboardButton("üî• –ö–Ω–æ–ø–∫–∞ 1", callback_data='button1')],
        [InlineKeyboardButton("‚≠ê –ö–Ω–æ–ø–∫–∞ 2", callback_data='button2')],
        [InlineKeyboardButton("üöÄ –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏", callback_data='show_reply_keyboard')]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard)
    
    await update.message.reply_text(
        "–¢–µ—Å—Ç –±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏
async def button_callback(update, context):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è
    
    if query.data == 'button1':
        await query.edit_message_text("–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É 1! üî•")
    elif query.data == 'button2':
        await query.edit_message_text("–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É 2! ‚≠ê")
    elif query.data == 'show_reply_keyboard':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
            [KeyboardButton("‚ùì –ü–æ–º–æ—â—å"), KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await query.edit_message_text("–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É:")
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–ö–Ω–æ–ø–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (reply keyboard)
async def handle_reply_buttons(update, context):
    text = update.message.text
    
    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await update.message.reply_text("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä")
    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await update.message.reply_text("–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è")
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await update.message.reply_text("–ü–æ–º–æ—â—å: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞")
    elif text == "üîô –ù–∞–∑–∞–¥":
        await cmd_start(update, context)

# –°–æ–∑–¥–∞–Ω–∏–µ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
application = Application.builder().token(TELEGRAM_TOKEN).build()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
application.add_handler(CommandHandler("start", cmd_start))
application.add_handler(CallbackQueryHandler(button_callback))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_reply_buttons))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    application.run_polling()
