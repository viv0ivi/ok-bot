import os
import time
import re
import logging
import sys
import threading
import asyncio
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from flask import Flask, jsonify

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ ENV
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_USER_ID = os.getenv("TELEGRAM_USER_ID")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TELEGRAM_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_BOT_TOKEN")

if not TELEGRAM_USER_ID:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_USER_ID")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s | %(levelname)s | %(message)s", level=logging.INFO)
logger = logging.getLogger("okru_bot")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Å—Å–∏–∏ –∏ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
current_session = None
current_profile = None
waiting_for_sms = False
waiting_for_groups = False
waiting_for_post = False
sms_code_received = None
groups_received = None
post_info_received = None

# Flask app –¥–ª—è health check (–Ω—É–∂–µ–Ω –¥–ª—è Render)
app = Flask(__name__)

@app.route('/')
def health_check():
    return jsonify({"status": "ok", "message": "Bot is running"})

@app.route('/health')
def health():
    return jsonify({"status": "healthy"})

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
def get_profiles():
    profiles = {}
    i = 1
    while True:
        person = os.getenv(f"OK_PERSON_{i}")
        email = os.getenv(f"OK_EMAIL_{i}")
        password = os.getenv(f"OK_PASSWORD_{i}")
        
        if not person or not email or not password:
            break
            
        profiles[i] = {
            'person': person,
            'email': email,
            'password': password
        }
        i += 1
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑ –Ω–æ–º–µ—Ä–∞
    if not profiles:
        person = os.getenv("OK_PERSON")
        email = os.getenv("OK_EMAIL")
        password = os.getenv("OK_PASSWORD")
        
        if person and email and password:
            profiles[1] = {
                'person': person,
                'email': email,
                'password': password
            }
    
    return profiles

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OK.ru
class OKSession:
    def __init__(self, email, password, person_name):
        self.email = email
        self.password = password
        self.person_name = person_name
        self.driver = None
        self.wait = None
        self.authenticated = False
        
    def init_driver(self):
        opts = uc.ChromeOptions()
        opts.add_argument('--headless=new')
        opts.add_argument('--no-sandbox')
        opts.add_argument('--disable-dev-shm-usage')
        opts.add_argument('--disable-gpu')
        opts.add_argument('--window-size=1920,1080')
        self.driver = uc.Chrome(options=opts)
        self.wait = WebDriverWait(self.driver, 20)
        
    def try_confirm_identity(self):
        try:
            btn = self.wait.until(EC.element_to_be_clickable((By.XPATH,
                "//input[@value='Yes, confirm']"
                " | //button[contains(text(),'Yes, confirm')]"
                " | //button[contains(text(),'–î–∞, —ç—Ç–æ —è')]"
            )))
            btn.click()
            logger.info("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ—à–ª–æ")
            time.sleep(1)
        except:
            logger.info("–ù–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏")

    def wait_for_sms_code(self, timeout=120):
        global waiting_for_sms, sms_code_received
        waiting_for_sms = True
        sms_code_received = None
        
        logger.info("–û–∂–∏–¥–∞—é SMS-–∫–æ–¥")
        deadline = time.time() + timeout
        
        while time.time() < deadline:
            if sms_code_received is not None:
                code = sms_code_received
                sms_code_received = None
                waiting_for_sms = False
                logger.info("SMS-–∫–æ–¥ –ø–æ–ª—É—á–µ–Ω")
                return code
            time.sleep(1)
        
        waiting_for_sms = False
        logger.error("–ù–µ –ø–æ–ª—É—á–∏–ª–∏ SMS-–∫–æ–¥")
        raise TimeoutException("SMS-–∫–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω")

    def try_sms_verification(self):
        try:
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {self.person_name}")
            data_l = self.driver.find_element(By.TAG_NAME,'body').get_attribute('data-l') or ''
            if 'userMain' in data_l and 'anonymMain' not in data_l:
                logger.info(f"‚úÖ {self.person_name} —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
                return True
                
            logger.info(f"üì± –¢—Ä–µ–±—É–µ—Ç—Å—è SMS-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è {self.person_name}")
            logger.info(f"üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é SMS-–∫–æ–¥ –¥–ª—è {self.person_name}")
            btn = self.wait.until(EC.element_to_be_clickable((By.XPATH,
                "//input[@type='submit' and @value='Get code']"
            )))
            btn.click()
            time.sleep(1)
            
            body_text = self.driver.find_element(By.TAG_NAME,'body').text.lower()
            if 'too often' in body_text:
                logger.error(f"‚è∞ RATE LIMIT –Ω–∞ SMS –¥–ª—è {self.person_name}! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
                return False
                
            logger.info(f"‚åõ –û–∂–∏–¥–∞—é –≤–≤–æ–¥ SMS-–∫–æ–¥–∞ –¥–ª—è {self.person_name}...")
            inp = self.wait.until(EC.presence_of_element_located((By.XPATH,
                "//input[@id='smsCode' or contains(@name,'smsCode')]"
            )))
            
            logger.info(f"üì® –ñ–¥—É SMS-–∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è {self.person_name}")
            code = self.wait_for_sms_code()
            
            logger.info(f"üî¢ –í–≤–æ–∂—É SMS-–∫–æ–¥ –¥–ª—è {self.person_name}")
            inp.clear()
            inp.send_keys(code)
            next_btn = self.driver.find_element(By.XPATH,
                "//input[@type='submit' and @value='Next']"
            )
            next_btn.click()
            
            logger.info(f"‚úÖ SMS-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è {self.person_name}!")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ SMS-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è {self.person_name}: {str(e)}")
            return False

    def authenticate(self):
        try:
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è {self.person_name}")
            self.init_driver()
            logger.info(f"üåê –û—Ç–∫—Ä—ã–≤–∞—é OK.ru –¥–ª—è {self.person_name}")
            self.driver.get("https://ok.ru/")
            
            logger.info(f"üìù –í–≤–æ–∂—É email –¥–ª—è {self.person_name}")
            self.wait.until(EC.presence_of_element_located((By.NAME,'st.email'))).send_keys(self.email)
            
            logger.info(f"üîë –í–≤–æ–∂—É –ø–∞—Ä–æ–ª—å –¥–ª—è {self.person_name}")
            self.driver.find_element(By.NAME,'st.password').send_keys(self.password)
            
            logger.info(f"‚úÖ –ù–∞–∂–∏–º–∞—é –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞ –¥–ª—è {self.person_name}")
            self.driver.find_element(By.CSS_SELECTOR, "input[type='submit']").click()
            time.sleep(2)
            
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è {self.person_name}")
            self.try_confirm_identity()
            
            logger.info(f"üì± –ü—Ä–æ–≤–µ—Ä—è—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å SMS-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è {self.person_name}")
            if self.try_sms_verification():
                self.authenticated = True
                logger.info(f"üéâ –£–°–ü–ï–®–ù–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –¥–ª—è {self.person_name}!")
                logger.info(f"‚úÖ {self.person_name} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—ã...")
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ SMS-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è {self.person_name}")
                return False
        except Exception as e:
            logger.error(f"üí• –û–®–ò–ë–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –¥–ª—è {self.person_name}: {str(e)}")
            return False

    def wait_for_groups(self):
        global waiting_for_groups, groups_received
        waiting_for_groups = True
        groups_received = None
        
        logger.info("–ñ–¥—É –∫–æ–º–∞–Ω–¥—É #–≥—Ä—É–ø–ø—ã")
        while groups_received is None:
            time.sleep(1)
        
        groups = groups_received
        groups_received = None
        waiting_for_groups = False
        logger.info("–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø–æ–ª—É—á–µ–Ω")
        return groups

    def wait_for_post_info(self):
        global waiting_for_post, post_info_received
        waiting_for_post = True
        post_info_received = None
        
        logger.info("–ñ–¥—É –∫–æ–º–∞–Ω–¥—É #–ø–æ—Å—Ç")
        while post_info_received is None:
            time.sleep(1)
        
        post_info = post_info_received
        post_info_received = None
        waiting_for_post = False
        logger.info("–ò–Ω—Ñ–æ –¥–ª—è –ø–æ—Å—Ç–∞ –ø–æ–ª—É—á–µ–Ω–æ")
        return post_info

    def post_to_group(self, group_url, video_url, text):
        self.driver.get(group_url.rstrip('/') + '/post')
        logger.info("–û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å—Ç–∏–Ω–≥–∞")
        field = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,
            "div[contenteditable='true']"
        )))
        field.click()
        field.clear()
        # 1) –≤—Å—Ç–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        field.send_keys(video_url)
        logger.info("–°—Å—ã–ª–∫–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞")
        # 2) –∂–¥—ë–º –∫–∞—Ä—Ç–æ—á–∫—É
        logger.info("–ñ–¥—É –≤–∏–¥–µ–æ-–∫–∞—Ä—Ç–æ—á–∫—É")
        self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR,
            "div.vid-card.vid-card__xl"
        )))
        # 3) –ø–æ —Å—Ç—Ä–æ–∫–∞–º –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        logger.info("–í—Å—Ç–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç –ø–æ —Å—Ç—Ä–æ–∫–∞–º")
        for line in text.splitlines():
            field.send_keys(line)
            field.send_keys(Keys.SHIFT, Keys.ENTER)
            time.sleep(5)
        # 4) –ø—É–±–ª–∏–∫—É–µ–º
        btn = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,
            "button.js-pf-submit-btn[data-action='submit']"
        )))
        btn.click()
        logger.info("–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
        time.sleep(1)

    def start_posting_workflow(self):
        try:
            groups = self.wait_for_groups()
            video_url, post_text = self.wait_for_post_info()
            for g in groups:
                self.post_to_group(g, video_url, post_text)
            logger.info("–í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {str(e)}")
            
    def close(self):
        if self.driver:
            self.driver.quit()
            logger.info("–°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def start_auth_thread(profile_data, profile_id):
    global current_session, current_profile
    logger.info(f"üîÑ –°–æ–∑–¥–∞—é —Å–µ—Å—Å–∏—é –¥–ª—è {profile_data['person']}")
    session = OKSession(profile_data['email'], profile_data['password'], profile_data['person'])
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {profile_data['person']}")
    if session.authenticate():
        current_session = session
        current_profile = profile_id
        logger.info(f"üéØ –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è {profile_data['person']}. –ì–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥!")
        # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å
        logger.info(f"‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞—é —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è {profile_data['person']}")
        session.start_posting_workflow()
    else:
        logger.error(f"üö´ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ü–†–û–í–ê–õ–ï–ù–ê –¥–ª—è {profile_data['person']}")
        session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update, context):
    global waiting_for_sms, waiting_for_groups, waiting_for_post
    global sms_code_received, groups_received, post_info_received
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if str(update.message.chat.id) != TELEGRAM_USER_ID:
        return
    
    text = update.message.text.strip()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ SMS-–∫–æ–¥–∞
    if waiting_for_sms:
        sms_match = re.match(r"^(?:#–∫–æ–¥\s*)?(\d{4,6})$", text, re.IGNORECASE)
        if sms_match:
            sms_code_received = sms_match.group(1)
            await update.message.reply_text("‚úÖ SMS-–∫–æ–¥ –ø–æ–ª—É—á–µ–Ω!")
            return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã #–≥—Ä—É–ø–ø—ã
    if text.lower().startswith("#–≥—Ä—É–ø–ø—ã"):
        groups_match = re.match(r"#–≥—Ä—É–ø–ø—ã\s+(.+)", text, re.IGNORECASE)
        if groups_match:
            urls = re.findall(r"https?://ok\.ru/group/\d+/?", groups_match.group(1))
            if urls:
                if waiting_for_groups:
                    groups_received = urls
                    await update.message.reply_text(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ {len(urls)} –≥—Ä—É–ø–ø!")
                else:
                    await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!")
            else:
                await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã!")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã #–ø–æ—Å—Ç
    if text.lower().startswith("#–ø–æ—Å—Ç"):
        post_match = re.match(r"#–ø–æ—Å—Ç\s+(.+)", text, re.IGNORECASE)
        if post_match:
            rest = post_match.group(1).strip()
            url_match = re.search(r"https?://\S+", rest)
            if url_match:
                video_url = url_match.group(0)
                post_text = rest.replace(video_url, "").strip()
                if waiting_for_post:
                    post_info_received = (video_url, post_text)
                    await update.message.reply_text("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!")
                else:
                    await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—ã!")
            else:
                await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ!")
        return

# Telegram –±–æ—Ç —Ñ—É–Ω–∫—Ü–∏–∏
async def cmd_start(update, context):
    inline_keyboard = [
        [InlineKeyboardButton("üåø –†–æ–∑–≥–∞–ª—É–¥–∂—É–≤–∞—Ç–∏", callback_data='branch')]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard)
    
    await update.message.reply_text(
        "–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=reply_markup
    )

async def show_profiles(update, context):
    profiles = get_profiles()
    
    if not profiles:
        await update.callback_query.edit_message_text(
            "‚ùå –ü—Ä–æ—Ñ—ñ–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ!\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è."
        )
        return
    
    inline_keyboard = []
    for profile_id, profile_data in profiles.items():
        button_text = f"üë§ {profile_data['person']}"
        callback_data = f"profile_{profile_id}"
        inline_keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    inline_keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_start')])
    
    reply_markup = InlineKeyboardMarkup(inline_keyboard)
    
    await update.callback_query.edit_message_text(
        "–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:",
        reply_markup=reply_markup
    )

async def button_callback(update, context):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'branch':
        await show_profiles(update, context)
    
    elif query.data.startswith('profile_'):
        profile_id = int(query.data.split('_')[1])
        profiles = get_profiles()
        
        if profile_id in profiles:
            selected_profile = profiles[profile_id]
            
            message = f"‚úÖ –û–±—Ä–∞–Ω–æ –ø—Ä–æ—Ñ—ñ–ª—å: {selected_profile['person']}\n"
            message += f"üìß Email: {selected_profile['email']}\n"
            message += "üîÑ –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è...\n\n"
            message += "üì± –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω SMS-–∫–æ–¥, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –π–æ–≥–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
            message += "#–∫–æ–¥ 123456\n\n"
            message += "–ü—ñ—Å–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –Ω–∞–¥—ñ—à–ª—ñ—Ç—å:\n"
            message += "üìã #–≥—Ä—É–ø–ø—ã [—Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫]\n"
            message += "üìù #–ø–æ—Å—Ç [—Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ] [—Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞]"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ—Ñ–∏–ª–µ–π
            inline_keyboard = [
                [InlineKeyboardButton("üîô –û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –ø—Ä–æ—Ñ—ñ–ª—å", callback_data='branch')],
                [InlineKeyboardButton("üè† –ù–∞ –ø–æ—á–∞—Ç–æ–∫", callback_data='back_to_start')]
            ]
            reply_markup = InlineKeyboardMarkup(inline_keyboard)
            
            await query.edit_message_text(message, reply_markup=reply_markup)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            auth_thread = threading.Thread(
                target=start_auth_thread, 
                args=(selected_profile, profile_id)
            )
            auth_thread.daemon = True
            auth_thread.start()
            
            logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: {selected_profile['person']}")
        else:
            await query.edit_message_text("‚ùå –ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
    
    elif query.data == 'back_to_start':
        await cmd_start_callback(update, context)

async def cmd_start_callback(update, context):
    inline_keyboard = [
        [InlineKeyboardButton("üåø –†–æ–∑–≥–∞–ª—É–¥–∂—É–≤–∞—Ç–∏", callback_data='branch')]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard)
    
    await update.callback_query.edit_message_text(
        "–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=reply_markup
    )

# –°–æ–∑–¥–∞–Ω–∏–µ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
application = Application.builder().token(TELEGRAM_TOKEN).build()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
application.add_handler(CommandHandler("start", cmd_start))
application.add_handler(CallbackQueryHandler(button_callback))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è health check
    def run_flask():
        port = int(os.environ.get('PORT', 5000))
        app.run(host='0.0.0.0', port=port, debug=False)
    
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫–∞—é Telegram –±–æ—Ç–∞...")
    logger.info("üåê Flask health check –∑–∞–ø—É—â–µ–Ω")
    
    try:
        application.run_polling()
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if current_session:
            logger.info("üîÑ –ó–∞–∫—Ä—ã–≤–∞—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é...")
            current_session.close()
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
