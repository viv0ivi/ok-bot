import os
import time
import re
import logging
import sys
import threading
import asyncio
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from flask import Flask, request, jsonify
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ ENV
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_USER_ID = os.getenv("TELEGRAM_USER_ID")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ù–∞–ø—Ä–∏–º–µ—Ä: https://your-app.onrender.com/webhook
USE_WEBHOOK = os.getenv("USE_WEBHOOK", "false").lower() == "true"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TELEGRAM_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_BOT_TOKEN")

if not TELEGRAM_USER_ID:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: TELEGRAM_USER_ID")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s | %(levelname)s | %(message)s", level=logging.INFO)
logger = logging.getLogger("okru_bot")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Å—Å–∏–∏ –∏ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
current_session = None
current_profile = None
waiting_for_sms = False
waiting_for_groups = False
waiting_for_post = False
sms_code_received = None
groups_received = None
post_info_received = None
bot_running = True

# Flask app
app = Flask(__name__)

# Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)
application = None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
async def send_telegram_message(text):
    try:
        bot = Bot(token=TELEGRAM_TOKEN)
        await bot.send_message(chat_id=TELEGRAM_USER_ID, text=text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

@app.route('/')
def health_check():
    return jsonify({"status": "ok", "message": "Bot is running"})

@app.route('/health')
def health():
    return jsonify({"status": "healthy"})

@app.route('/webhook', methods=['POST'])
async def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
    if request.content_type == 'application/json':
        try:
            update_data = request.get_json()
            update = Update.de_json(update_data, application.bot)
            await application.process_update(update)
            return jsonify({"status": "ok"})
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            return jsonify({"status": "error", "message": str(e)}), 500
    return jsonify({"status": "error", "message": "Invalid content type"}), 400

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
def get_profiles():
    profiles = {}
    i = 1
    while True:
        person = os.getenv(f"OK_PERSON_{i}")
        email = os.getenv(f"OK_EMAIL_{i}")
        password = os.getenv(f"OK_PASSWORD_{i}")
        
        if not person or not email or not password:
            break
            
        profiles[i] = {
            'person': person,
            'email': email,
            'password': password
        }
        i += 1
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑ –Ω–æ–º–µ—Ä–∞
    if not profiles:
        person = os.getenv("OK_PERSON")
        email = os.getenv("OK_EMAIL")
        password = os.getenv("OK_PASSWORD")
        
        if person and email and password:
            profiles[1] = {
                'person': person,
                'email': email,
                'password': password
            }
    
    return profiles

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OK.ru
class OKSession:
    def __init__(self, email, password, person_name):
        self.email = email
        self.password = password
        self.person_name = person_name
        self.driver = None
        self.wait = None
        self.authenticated = False
        
    async def send_status(self, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Telegram"""
        status_message = f"üë§ {self.person_name}\n{message}"
        await send_telegram_message(status_message)
        
    def init_driver(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        max_attempts = 3
        
        for attempt in range(max_attempts):
            try:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞")
                
                opts = uc.ChromeOptions()
                opts.add_argument('--headless=new')
                opts.add_argument('--no-sandbox')
                opts.add_argument('--disable-dev-shm-usage')
                opts.add_argument('--disable-gpu')
                opts.add_argument('--window-size=1920,1080')
                opts.add_argument('--disable-web-security')
                opts.add_argument('--allow-running-insecure-content')
                opts.add_argument('--disable-extensions')
                opts.add_argument('--disable-plugins')
                opts.add_argument('--disable-images')
                opts.add_argument('--disable-javascript')
                opts.add_argument('--disable-default-apps')
                opts.add_argument('--disable-background-timer-throttling')
                opts.add_argument('--disable-backgrounding-occluded-windows')
                opts.add_argument('--disable-renderer-backgrounding')
                opts.add_argument('--disable-features=TranslateUI')
                opts.add_argument('--disable-ipc-flooding-protection')
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                if attempt == 0:
                    # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏—è–º–∏
                    self.driver = uc.Chrome(options=opts, version_main=None)
                elif attempt == 1:
                    # –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π Chrome
                    self.driver = uc.Chrome(options=opts, use_subprocess=False)
                else:
                    # –¢—Ä–µ—Ç—å—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–π –≤–µ—Ä—Å–∏–∏
                    self.driver = uc.Chrome(options=opts, driver_executable_path=None)
                
                self.wait = WebDriverWait(self.driver, 20)
                logger.info("Chrome –¥—Ä–∞–π–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return True
                
            except WebDriverException as e:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞: {str(e)}")
                if attempt == max_attempts - 1:
                    logger.error("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
                    raise e
                time.sleep(2)
            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
                if attempt == max_attempts - 1:
                    raise e
                time.sleep(2)
        
        return False
        
    async def try_confirm_identity(self):
        try:
            btn = self.wait.until(EC.element_to_be_clickable((By.XPATH,
                "//input[@value='Yes, confirm']"
                " | //button[contains(text(),'Yes, confirm')]"
                " | //button[contains(text(),'–î–∞, —ç—Ç–æ —è')]"
            )))
            btn.click()
            await self.send_status("‚úÖ –õ–∏—á–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
            time.sleep(1)
        except:
            await self.send_status("‚ÑπÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

    def wait_for_sms_code(self, timeout=120):
        global waiting_for_sms, sms_code_received
        waiting_for_sms = True
        sms_code_received = None
        
        logger.info("–û–∂–∏–¥–∞—é SMS-–∫–æ–¥")
        deadline = time.time() + timeout
        
        while time.time() < deadline:
            if sms_code_received is not None:
                code = sms_code_received
                sms_code_received = None
                waiting_for_sms = False
                logger.info("SMS-–∫–æ–¥ –ø–æ–ª—É—á–µ–Ω")
                return code
            time.sleep(1)
        
        waiting_for_sms = False
        logger.error("–ù–µ –ø–æ–ª—É—á–∏–ª–∏ SMS-–∫–æ–¥")
        raise TimeoutException("SMS-–∫–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω")

    async def try_sms_verification(self):
        try:
            await self.send_status("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å...")
            data_l = self.driver.find_element(By.TAG_NAME,'body').get_attribute('data-l') or ''
            if 'userMain' in data_l and 'anonymMain' not in data_l:
                await self.send_status("‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
                return True
                
            await self.send_status("üì± –ù—É–∂–Ω–∞ SMS-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è")
            btn = self.wait.until(EC.element_to_be_clickable((By.XPATH,
                "//input[@type='submit' and @value='Get code']"
            )))
            btn.click()
            time.sleep(1)
            
            body_text = self.driver.find_element(By.TAG_NAME,'body').text.lower()
            if 'too often' in body_text:
                await self.send_status("‚è∞ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
                return False
                
            await self.send_status("‚åõ –ñ–¥—É SMS-–∫–æ–¥...")
            inp = self.wait.until(EC.presence_of_element_located((By.XPATH,
                "//input[@id='smsCode' or contains(@name,'smsCode')]"
            )))
            
            code = self.wait_for_sms_code()
            
            await self.send_status("üî¢ –í–≤–æ–∂—É –∫–æ–¥...")
            inp.clear()
            inp.send_keys(code)
            next_btn = self.driver.find_element(By.XPATH,
                "//input[@type='submit' and @value='Next']"
            )
            next_btn.click()
            
            await self.send_status("‚úÖ SMS –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
            return True
        except Exception as e:
            await self.send_status(f"‚ùå –û—à–∏–±–∫–∞ SMS: {str(e)[:50]}...")
            return False

    async def authenticate(self):
        try:
            await self.send_status("üöÄ –ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            if not self.init_driver():
                await self.send_status("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä")
                return False
            
            await self.send_status("üåê –û—Ç–∫—Ä—ã–≤–∞—é OK.ru...")
            self.driver.get("https://ok.ru/")
            
            await self.send_status("üìù –í–≤–æ–∂—É –¥–∞–Ω–Ω—ã–µ...")
            self.wait.until(EC.presence_of_element_located((By.NAME,'st.email'))).send_keys(self.email)
            self.driver.find_element(By.NAME,'st.password').send_keys(self.password)
            self.driver.find_element(By.CSS_SELECTOR, "input[type='submit']").click()
            time.sleep(2)
            
            await self.try_confirm_identity()
            
            if await self.try_sms_verification():
                self.authenticated = True
                await self.send_status("üéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                return True
            else:
                await self.send_status("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞")
                return False
                
        except WebDriverException as e:
            error_msg = str(e)
            if "chrome" in error_msg.lower() and "version" in error_msg.lower():
                await self.send_status("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤–µ—Ä—Å–∏–µ–π Chrome. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä –∏–ª–∏ ChromeDriver")
            else:
                await self.send_status(f"‚ùå –û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {error_msg[:50]}...")
            return False
        except Exception as e:
            await self.send_status(f"üí• –û—à–∏–±–∫–∞: {str(e)[:50]}...")
            return False

    def wait_for_groups(self):
        global waiting_for_groups, groups_received
        waiting_for_groups = True
        groups_received = None
        
        logger.info("–ñ–¥—É –∫–æ–º–∞–Ω–¥—É #–≥—Ä—É–ø–ø—ã")
        while groups_received is None:
            time.sleep(1)
        
        groups = groups_received
        groups_received = None
        waiting_for_groups = False
        logger.info("–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø–æ–ª—É—á–µ–Ω")
        return groups

    def wait_for_post_info(self):
        global waiting_for_post, post_info_received
        waiting_for_post = True
        post_info_received = None
        
        logger.info("–ñ–¥—É –∫–æ–º–∞–Ω–¥—É #–ø–æ—Å—Ç")
        while post_info_received is None:
            time.sleep(1)
        
        post_info = post_info_received
        post_info_received = None
        waiting_for_post = False
        logger.info("–ò–Ω—Ñ–æ –¥–ª—è –ø–æ—Å—Ç–∞ –ø–æ–ª—É—á–µ–Ω–æ")
        return post_info

    async def post_to_group(self, group_url, video_url, text):
    post_url = group_url.rstrip('/') + '/post'
    logger.info("üöÄ –û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å—Ç–∏–Ω–≥–∞")
    self.driver.get(post_url)
    
    # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞
    box = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,
        "div[contenteditable='true']"
    )))
    box.click()
    box.clear()
    
    # 1) –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –∏ –ø—Ä–æ–±–µ–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é
    box.send_keys(video_url)
    box.send_keys(Keys.SPACE)  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é!
    logger.info("‚úçÔ∏è –°—Å—ã–ª–∫–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –∏ –ø—Ä–æ–±–µ–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    
    # 2) –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–µ–≤—å—é —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
    logger.info("‚è≥ –ñ–¥—É –≤–∏–¥–µ–æ-–∫–∞—Ä—Ç–æ—á–∫—É...")
    attached = False
    for _ in range(10):  # 10 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–µ–≤—å—é
        if self.driver.find_elements(By.CSS_SELECTOR, "div.vid-card.vid-card__xl"):
            attached = True
            break
        if self.driver.find_elements(By.CSS_SELECTOR, "div.mediaPreview, div.mediaFlex, div.preview_thumb"):
            attached = True
            break
        time.sleep(1)
    
    if attached:
        logger.info("‚úÖ –í–∏–¥–µ–æ-–∫–∞—Ä—Ç–∞ –ø–æ—è–≤–∏–ª–∞—Å—å")
    else:
        logger.warning(f"‚ö†Ô∏è –ù–µ –¥–æ–∂–¥–∞–ª—Å—è –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–∏–¥–µ–æ –∑–∞ 10 —Å–µ–∫ –Ω–∞ {group_url}")
    
    # 3) –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π (–Ω–µ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ!)
    box.send_keys(" " + text)  # –ü—Ä–æ–±–µ–ª + –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ä–∞–∑—É
    logger.info("‚úçÔ∏è –¢–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω")
    
    # 4) –ü—É–±–ª–∏–∫—É–µ–º
    btn = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,
        "button.js-pf-submit-btn[data-action='submit']"
    )))
    btn.click()
    logger.info("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
    await self.send_status("üìù –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø–µ")
    time.sleep(1)
    
    async def start_posting_workflow(self):
        try:
            await self.send_status("‚è≥ –ñ–¥—É –∫–æ–º–∞–Ω–¥—É #–≥—Ä—É–ø–ø—ã...")
            groups = self.wait_for_groups()
            await self.send_status("‚è≥ –ñ–¥—É –∫–æ–º–∞–Ω–¥—É #–ø–æ—Å—Ç...")
            video_url, post_text = self.wait_for_post_info()
            await self.send_status(f"üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ—Å—Ç–∏–Ω–≥ –≤ {len(groups)} –≥—Ä—É–ø–ø...")
            for i, g in enumerate(groups, 1):
                await self.post_to_group(g, video_url, post_text)
                await self.send_status(f"‚úÖ {i}/{len(groups)} –≥—Ä—É–ø–ø –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            await self.send_status("üéâ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
        except Exception as e:
            await self.send_status(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:50]}...")
            
    def close(self):
        if self.driver:
            try:
                self.driver.quit()
                logger.info("–°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def start_auth_thread(profile_data, profile_id):
    global current_session, current_profile, bot_running
    
    async def auth_process():
        global current_session, current_profile
        logger.info(f"üîÑ –°–æ–∑–¥–∞—é —Å–µ—Å—Å–∏—é –¥–ª—è {profile_data['person']}")
        session = OKSession(profile_data['email'], profile_data['password'], profile_data['person'])
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {profile_data['person']}")
        if await session.authenticate():
            current_session = session
            current_profile = profile_id
            logger.info(f"üéØ –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è {profile_data['person']}. –ì–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥!")
            # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å
            logger.info(f"‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞—é —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è {profile_data['person']}")
            await session.start_posting_workflow()
        else:
            logger.error(f"üö´ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ü–†–û–í–ê–õ–ï–ù–ê –¥–ª—è {profile_data['person']}")
            session.close()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –Ω–æ–≤–æ–º event loop
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        loop.run_until_complete(auth_process())
    finally:
        loop.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update, context):
    global waiting_for_sms, waiting_for_groups, waiting_for_post
    global sms_code_received, groups_received, post_info_received
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if str(update.message.chat.id) != TELEGRAM_USER_ID:
        return
    
    text = update.message.text.strip()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ SMS-–∫–æ–¥–∞
    if waiting_for_sms:
        sms_match = re.match(r"^(?:#–∫–æ–¥\s*)?(\d{4,6})$", text, re.IGNORECASE)
        if sms_match:
            sms_code_received = sms_match.group(1)
            await update.message.reply_text("‚úÖ SMS-–∫–æ–¥ –ø–æ–ª—É—á–µ–Ω!")
            return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã #–≥—Ä—É–ø–ø—ã
    if text.lower().startswith("#–≥—Ä—É–ø–ø—ã"):
        groups_match = re.match(r"#–≥—Ä—É–ø–ø—ã\s+(.+)", text, re.IGNORECASE)
        if groups_match:
            urls = re.findall(r"https?://ok\.ru/group/\d+/?", groups_match.group(1))
            if urls:
                if waiting_for_groups:
                    groups_received = urls
                    await update.message.reply_text(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ {len(urls)} –≥—Ä—É–ø–ø!")
                else:
                    await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è!")
            else:
                await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã!")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã #–ø–æ—Å—Ç
    if text.lower().startswith("#–ø–æ—Å—Ç"):
        post_match = re.match(r"#–ø–æ—Å—Ç\s+(.+)", text, re.IGNORECASE)
        if post_match:
            rest = post_match.group(1).strip()
            url_match = re.search(r"https?://\S+", rest)
            if url_match:
                video_url = url_match.group(0)
                post_text = rest.replace(video_url, "").strip()
                if waiting_for_post:
                    post_info_received = (video_url, post_text)
                    await update.message.reply_text("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!")
                else:
                    await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—ã!")
            else:
                await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ!")
        return

# Telegram –±–æ—Ç —Ñ—É–Ω–∫—Ü–∏–∏
async def cmd_start(update, context):
    inline_keyboard = [
        [InlineKeyboardButton("üåø –†–æ–∑–≥–∞–ª—É–¥–∂—É–≤–∞—Ç–∏", callback_data='branch')]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard)
    
    await update.message.reply_text(
        "–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=reply_markup
    )

async def show_profiles(update, context):
    profiles = get_profiles()
    
    if not profiles:
        await update.callback_query.edit_message_text(
            "‚ùå –ü—Ä–æ—Ñ—ñ–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ!\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è."
        )
        return
    
    inline_keyboard = []
    for profile_id, profile_data in profiles.items():
        button_text = f"üë§ {profile_data['person']}"
        callback_data = f"profile_{profile_id}"
        inline_keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    inline_keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_start')])
    
    reply_markup = InlineKeyboardMarkup(inline_keyboard)
    
    await update.callback_query.edit_message_text(
        "–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ—Ñ—ñ–ª—å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:",
        reply_markup=reply_markup
    )

async def show_control_panel(update, context, profile_name):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
    message = f"‚úÖ –û–±—Ä–∞–Ω–æ –ø—Ä–æ—Ñ—ñ–ª—å: {profile_name}\n"
    message += "üîÑ –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è...\n\n"
    message += "üì± –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω SMS-–∫–æ–¥, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –π–æ–≥–æ:\n"
    message += "#–∫–æ–¥ 123456\n\n"
    message += "–ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ:"
    
    inline_keyboard = [
        [InlineKeyboardButton("üìã –î–æ–¥–∞—Ç–∏ #–≥—Ä—É–ø–ø—ã", callback_data='add_groups')],
        [InlineKeyboardButton("üìù –î–æ–¥–∞—Ç–∏ #–ø–æ—Å—Ç", callback_data='add_post')],
        [InlineKeyboardButton("üõë –ó—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞", callback_data='stop_bot')],
        [InlineKeyboardButton("üîô –û–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –ø—Ä–æ—Ñ—ñ–ª—å", callback_data='branch')],
        [InlineKeyboardButton("üè† –ù–∞ –ø–æ—á–∞—Ç–æ–∫", callback_data='back_to_start')]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard)
    
    await update.callback_query.edit_message_text(message, reply_markup=reply_markup)

async def button_callback(update, context):
    global bot_running, current_session
    query = update.callback_query
    await query.answer()
    
    if query.data == 'branch':
        await show_profiles(update, context)
    
    elif query.data.startswith('profile_'):
        profile_id = int(query.data.split('_')[1])
        profiles = get_profiles()
        
        if profile_id in profiles:
            selected_profile = profiles[profile_id]
            
            await show_control_panel(update, context, selected_profile['person'])
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            auth_thread = threading.Thread(
                target=start_auth_thread, 
                args=(selected_profile, profile_id)
            )
            auth_thread.daemon = True
            auth_thread.start()
            
            logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: {selected_profile['person']}")
        else:
            await query.edit_message_text("‚ùå –ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
    
    elif query.data == 'add_groups':
        inline_keyboard = [
            [InlineKeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–∞–Ω–µ–ª—ñ", callback_data='back_to_control_panel')]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard)
        
        await query.edit_message_text(
            "üìã –°–∫–æ–ø—ñ—é–π—Ç–µ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ:\n\n"
            "`#–≥—Ä—É–ø–ø—ã https://ok.ru/group/123456789 https://ok.ru/group/987654321`\n\n"
            "–ó–∞–º—ñ–Ω—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∞—à—ñ –≥—Ä—É–ø–∏",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    elif query.data == 'add_post':
        inline_keyboard = [
            [InlineKeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–∞–Ω–µ–ª—ñ", callback_data='back_to_control_panel')]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard)
        
        await query.edit_message_text(
            "üìù –°–∫–æ–ø—ñ—é–π—Ç–µ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ:\n\n"
            "`#–ø–æ—Å—Ç https://www.youtube.com/watch?v=example –í–∞—à —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ —Ç—É—Ç`\n\n"
            "–ó–∞–º—ñ–Ω—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Ç–∞ —Ç–µ–∫—Å—Ç –Ω–∞ –≤–∞—à—ñ",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    elif query.data == 'stop_bot':
        bot_running = False
        if current_session:
            current_session.close()
            current_session = None
        
        await query.edit_message_text(
            "üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ\n"
            "–í—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó –∑–∞–∫—Ä–∏—Ç–æ\n\n"
            "–î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start"
        )
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        os._exit(0)
    
    elif query.data == 'back_to_start':
        await cmd_start_callback(update, context)
    
    elif query.data == 'back_to_control_panel':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        if current_profile is not None:
            profiles = get_profiles()
            if current_profile in profiles:
                profile_name = profiles[current_profile]['person']
                await show_control_panel(update, context, profile_name)
            else:
                await cmd_start_callback(update, context)
        else:
            await cmd_start_callback(update, context)

async def cmd_start_callback(update, context):
    inline_keyboard = [
        [InlineKeyboardButton("üåø –†–æ–∑–≥–∞–ª—É–¥–∂—É–≤–∞—Ç–∏", callback_data='branch')]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard)
    
    await update.callback_query.edit_message_text(
        "–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=reply_markup
    )

# –°–æ–∑–¥–∞–Ω–∏–µ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
application = Application.builder().token(TELEGRAM_TOKEN).build()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
application.add_handler(CommandHandler("start", cmd_start))
application.add_handler(CallbackQueryHandler(button_callback))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    port = int(os.environ.get('PORT', 5000))
    
    if USE_WEBHOOK and WEBHOOK_URL:
        logger.info("üåê –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ Webhook")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
        async def set_webhook():
            await application.bot.set_webhook(url=f"{WEBHOOK_URL}/webhook")
            logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}/webhook")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É webhook
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(set_webhook())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        app.run(host='0.0.0.0', port=port, debug=False)
        
    else:
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ Polling")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è health check
        def run_flask():
            app.run(host='0.0.0.0', port=port, debug=False)
        
        flask_thread = threading.Thread(target=run_flask)
        flask_thread.daemon = True
        flask_thread.start()
        
        logger.info("üåê Flask health check –∑–∞–ø—É—â–µ–Ω")
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            async def clear_webhook():
                await application.bot.delete_webhook()
                logger.info("Webhook —É–¥–∞–ª–µ–Ω")
            
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(clear_webhook())
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            application.run_polling()
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            if current_session:
                logger.info("üîÑ –ó–∞–∫—Ä—ã–≤–∞—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é...")
                current_session.close()
            logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
